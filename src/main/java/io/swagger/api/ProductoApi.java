/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Producto;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-05-04T03:17:15.009Z")

@Validated
@Api(value = "producto", description = "the producto API")
@RequestMapping(value = "/v2")
public interface ProductoApi {

    @ApiOperation(value = "Agregar nuevo producto al Menu", nickname = "createProductWithForm", notes = "AÃ±adir producto al menu por medio de formulario", response = Producto.class, tags={ "Producto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "operacion exitosa", response = Producto.class),
        @ApiResponse(code = 405, message = "Entrada no valida") })
    @RequestMapping(value = "/producto",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<Producto> createProductWithForm(@ApiParam(value = "  Introduce el nombre del producto") @RequestParam(value="Nombre", required=false)  String nombre,@ApiParam(value = "Elige la categoria del producto", allowableValues="Cafes, Bebidas, Panaderia") @RequestParam(value="Categoria", required=false)  List<String> categoria,@ApiParam(value = "Introduce la descripcion del producto") @RequestParam(value="Descripcion", required=false)  String descripcion,@ApiParam(value = "Introduce el  precio del producto") @RequestParam(value="Precio", required=false)  String precio,@ApiParam(value = "Imagen del producto") @Valid @RequestPart(value="Imagen", required=false) MultipartFile Imagen);


    @ApiOperation(value = "Eliminar producto del menu", nickname = "deleteProduct", notes = "Eliminar producto del menu por ID", tags={ "Producto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "ID no valido"),
        @ApiResponse(code = 404, message = "Producto no encontrado") })
    @RequestMapping(value = "/producto/{productId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProduct(@ApiParam(value = "ID del producto a eliminar",required=true) @PathVariable("productId") Long productId);


    @ApiOperation(value = "Buscar producto por ID", nickname = "getProductById", notes = "Retorna un solo producto", response = Producto.class, tags={ "Producto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "operacion exitosa", response = Producto.class),
        @ApiResponse(code = 400, message = "id no valido"),
        @ApiResponse(code = 404, message = "producto no encontrado") })
    @RequestMapping(value = "/producto/{productId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Producto> getProductById(@ApiParam(value = "Introduce el ID del producto",required=true) @PathVariable("productId") Long productId);


    @ApiOperation(value = "Modificar o Actualizar un producto por medio de formulario", nickname = "updateProductWithForm", notes = "Modificar informacion del producto", tags={ "Producto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Entrada no valida") })
    @RequestMapping(value = "/producto/{productId}",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateProductWithForm(@ApiParam(value = "Introduce el ID del producto a actualizar",required=true) @PathVariable("productId") Long productId,@ApiParam(value = "Modificar nombre del producto") @RequestParam(value="Nombre", required=false)  String nombre,@ApiParam(value = "Modificar descripcion del producto") @RequestParam(value="Descripcion", required=false)  String descripcion,@ApiParam(value = "Modificar disponibilidad del producto") @RequestParam(value="Disponibilidad", required=false)  String disponibilidad,@ApiParam(value = "Modificar precio del producto") @RequestParam(value="Precio", required=false)  String precio,@ApiParam(value = "Modificar imagen del producto") @Valid @RequestPart(value="Imagen", required=false) MultipartFile Imagen);

}
